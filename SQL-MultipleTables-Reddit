SELECT *
FROM users
LIMIT 3;
SELECT *
FROM posts
LIMIT 3;
SELECT *
FROM subreddits
LIMIT 3;

--Write a query to count how many different subreddits there are.
SELECT COUNT(*) AS 'subreddit_count'
FROM subreddits;

--What user has the highest score?
SELECT username, MAX(score) AS 'Highest Score'
FROM users;

--What post has the highest score?
SELECT title, MAX(score) AS 'Popular Post'
FROM posts;

--What are the top 5 subreddits with the highest subscriber_count?
SELECT * 
FROM subreddits
ORDER BY subscriber_count DESC
LIMIT 5;

--Use a LEFT JOIN with the users and posts tables to find out how many posts each user has made. Have the users table as the left table and order the data by the number of posts in descending order.
SELECT users.username, COUNT(title) AS 'posts_made'
FROM users
LEFT JOIN posts
  ON users.id = posts.user_id
GROUP BY 1
ORDER BY 2 DESC;

--We only want to see existing posts where the users are still active, so use an INNER JOIN to write a query to get these posts. Have the posts table as the left table.
SELECT *
FROM posts
INNER JOIN users
  ON posts.user_id = users.id;

--Stack the new posts2 table under the existing posts table to see them.
SELECT *
FROM posts
UNION
SELECT *
FROM posts2;

--More queries
WITH popular_posts AS (
  SELECT *
  FROM posts
  WHERE score >= 5000
)

SELECT subreddits.name, popular_posts.title, popular_posts.score
FROM subreddits
INNER JOIN popular_posts
  ON subreddits.id = popular_posts.subreddit_id
ORDER BY popular_posts.score DESC;

--More queries
SELECT posts.title, subreddits.name AS 'subreddit_name', MAX(posts.score) AS 'highest score'
FROM posts
INNER JOIN subreddits
GROUP BY subreddits.id;

--More queries
SELECT subreddits.name AS 'subreddit_name', AVG(posts.score) AS 'average_score'
FROM subreddits
JOIN posts
  ON subreddits.id = posts.subreddit_id
GROUP BY subreddit_name
ORDER BY 2 DESC;
